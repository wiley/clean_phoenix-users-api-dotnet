// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WLSUser.Infrastructure.Contexts;

namespace WLSUser.Migrations
{
    [DbContext(typeof(UserDbContext))]
    [Migration("20210608210630_loginAttempts")]
    partial class loginAttempts
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("WLSUser.Models.AccessType", b =>
                {
                    b.Property<int>("AccessTypeID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccessTypeName")
                        .IsRequired()
                        .HasMaxLength(245);

                    b.HasKey("AccessTypeID");

                    b.HasIndex("AccessTypeID")
                        .IsUnique();

                    b.ToTable("AccessTypes");
                });

            modelBuilder.Entity("WLSUser.Models.Brand", b =>
                {
                    b.Property<int>("BrandID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(245);

                    b.HasKey("BrandID");

                    b.HasIndex("BrandID")
                        .IsUnique();

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("WLSUser.Models.LoginAttempts", b =>
                {
                    b.Property<Guid>("LoginAttemptID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Attempted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<bool>("Success")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<int>("UserID");

                    b.HasKey("LoginAttemptID");

                    b.HasIndex("LoginAttemptID");

                    b.HasIndex("UserID");

                    b.HasIndex("UserID", "Attempted")
                        .IsUnique();

                    b.ToTable("LoginAttempts");
                });

            modelBuilder.Entity("WLSUser.Models.RoleType", b =>
                {
                    b.Property<int>("RoleTypeID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BrandID");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(245);

                    b.HasKey("RoleTypeID");

                    b.HasIndex("BrandID");

                    b.HasIndex("RoleTypeID")
                        .IsUnique();

                    b.ToTable("RoleTypes");
                });

            modelBuilder.Entity("WLSUser.Models.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .HasMaxLength(255);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("OrigPasswordHash")
                        .HasMaxLength(50);

                    b.Property<string>("OrigPasswordSalt")
                        .HasMaxLength(50);

                    b.Property<int>("Status");

                    b.Property<DateTime?>("StrongPasswordGoodUntil");

                    b.Property<string>("StrongPasswordHash")
                        .HasMaxLength(50);

                    b.Property<string>("StrongPasswordSalt")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("StrongPasswordSet");

                    b.Property<string>("UniqueID")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("UserType");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("UniqueID")
                        .IsUnique();

                    b.HasIndex("Username", "UserType");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WLSUser.Models.UserRole", b =>
                {
                    b.Property<int>("UserRoleID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<int>("RoleTypeID");

                    b.Property<int>("UserID");

                    b.HasKey("UserRoleID");

                    b.HasIndex("RoleTypeID");

                    b.HasIndex("UserRoleID")
                        .IsUnique();

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("WLSUser.Models.UserRoleAccess", b =>
                {
                    b.Property<int>("UserRoleID");

                    b.Property<int>("AccessTypeID");

                    b.Property<int>("AccessRefID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<int>("GrantedBy");

                    b.HasKey("UserRoleID", "AccessTypeID", "AccessRefID");

                    b.HasIndex("AccessRefID");

                    b.HasIndex("AccessTypeID");

                    b.HasIndex("GrantedBy");

                    b.HasIndex("UserRoleID");

                    b.ToTable("UserRoleAccess");
                });
#pragma warning restore 612, 618
        }
    }
}
